/* Auto-generated by genmsg_cpp for file /opt/ros/groovy/stacks/ros_pkg_tutorials/isella3/srv/SetAmplitude.srv */
#ifndef ISELLA3_SERVICE_SETAMPLITUDE_H
#define ISELLA3_SERVICE_SETAMPLITUDE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace isella3
{
template <class ContainerAllocator>
struct SetAmplitudeRequest_ {
  typedef SetAmplitudeRequest_<ContainerAllocator> Type;

  SetAmplitudeRequest_()
  : amplitude(0.0)
  {
  }

  SetAmplitudeRequest_(const ContainerAllocator& _alloc)
  : amplitude(0.0)
  {
  }

  typedef double _amplitude_type;
  double amplitude;


  typedef boost::shared_ptr< ::isella3::SetAmplitudeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::isella3::SetAmplitudeRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetAmplitudeRequest
typedef  ::isella3::SetAmplitudeRequest_<std::allocator<void> > SetAmplitudeRequest;

typedef boost::shared_ptr< ::isella3::SetAmplitudeRequest> SetAmplitudeRequestPtr;
typedef boost::shared_ptr< ::isella3::SetAmplitudeRequest const> SetAmplitudeRequestConstPtr;



template <class ContainerAllocator>
struct SetAmplitudeResponse_ {
  typedef SetAmplitudeResponse_<ContainerAllocator> Type;

  SetAmplitudeResponse_()
  : amplitude(0.0)
  {
  }

  SetAmplitudeResponse_(const ContainerAllocator& _alloc)
  : amplitude(0.0)
  {
  }

  typedef double _amplitude_type;
  double amplitude;


  typedef boost::shared_ptr< ::isella3::SetAmplitudeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::isella3::SetAmplitudeResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetAmplitudeResponse
typedef  ::isella3::SetAmplitudeResponse_<std::allocator<void> > SetAmplitudeResponse;

typedef boost::shared_ptr< ::isella3::SetAmplitudeResponse> SetAmplitudeResponsePtr;
typedef boost::shared_ptr< ::isella3::SetAmplitudeResponse const> SetAmplitudeResponseConstPtr;


struct SetAmplitude
{

typedef SetAmplitudeRequest Request;
typedef SetAmplitudeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetAmplitude
} // namespace isella3

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::isella3::SetAmplitudeRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::isella3::SetAmplitudeRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::isella3::SetAmplitudeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0eeaf0bd32ede16f811b8cce1a39fcc0";
  }

  static const char* value(const  ::isella3::SetAmplitudeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0eeaf0bd32ede16fULL;
  static const uint64_t static_value2 = 0x811b8cce1a39fcc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::isella3::SetAmplitudeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "isella3/SetAmplitudeRequest";
  }

  static const char* value(const  ::isella3::SetAmplitudeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::isella3::SetAmplitudeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 amplitude\n\
\n\
";
  }

  static const char* value(const  ::isella3::SetAmplitudeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::isella3::SetAmplitudeRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::isella3::SetAmplitudeResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::isella3::SetAmplitudeResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::isella3::SetAmplitudeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0eeaf0bd32ede16f811b8cce1a39fcc0";
  }

  static const char* value(const  ::isella3::SetAmplitudeResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0eeaf0bd32ede16fULL;
  static const uint64_t static_value2 = 0x811b8cce1a39fcc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::isella3::SetAmplitudeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "isella3/SetAmplitudeResponse";
  }

  static const char* value(const  ::isella3::SetAmplitudeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::isella3::SetAmplitudeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 amplitude\n\
\n\
\n\
";
  }

  static const char* value(const  ::isella3::SetAmplitudeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::isella3::SetAmplitudeResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::isella3::SetAmplitudeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.amplitude);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetAmplitudeRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::isella3::SetAmplitudeResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.amplitude);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetAmplitudeResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<isella3::SetAmplitude> {
  static const char* value() 
  {
    return "e68e53e50ad5dca32bcdd4bd08619ffb";
  }

  static const char* value(const isella3::SetAmplitude&) { return value(); } 
};

template<>
struct DataType<isella3::SetAmplitude> {
  static const char* value() 
  {
    return "isella3/SetAmplitude";
  }

  static const char* value(const isella3::SetAmplitude&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<isella3::SetAmplitudeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e68e53e50ad5dca32bcdd4bd08619ffb";
  }

  static const char* value(const isella3::SetAmplitudeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<isella3::SetAmplitudeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "isella3/SetAmplitude";
  }

  static const char* value(const isella3::SetAmplitudeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<isella3::SetAmplitudeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e68e53e50ad5dca32bcdd4bd08619ffb";
  }

  static const char* value(const isella3::SetAmplitudeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<isella3::SetAmplitudeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "isella3/SetAmplitude";
  }

  static const char* value(const isella3::SetAmplitudeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ISELLA3_SERVICE_SETAMPLITUDE_H


/* Auto-generated by genmsg_cpp for file /opt/ros/groovy/stacks/ros_pkg_tutorials/isella3/msg/MyStateMessage.msg */
#ifndef ISELLA3_MESSAGE_MYSTATEMESSAGE_H
#define ISELLA3_MESSAGE_MYSTATEMESSAGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace isella3
{
template <class ContainerAllocator>
struct MyStateMessage_ {
  typedef MyStateMessage_<ContainerAllocator> Type;

  MyStateMessage_()
  : dt(0.0)
  , position(0.0)
  , desired_position(0.0)
  , position_error(0.0)
  , current(0.0)
  {
  }

  MyStateMessage_(const ContainerAllocator& _alloc)
  : dt(0.0)
  , position(0.0)
  , desired_position(0.0)
  , position_error(0.0)
  , current(0.0)
  {
  }

  typedef double _dt_type;
  double dt;

  typedef double _position_type;
  double position;

  typedef double _desired_position_type;
  double desired_position;

  typedef double _position_error_type;
  double position_error;

  typedef double _current_type;
  double current;


  typedef boost::shared_ptr< ::isella3::MyStateMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::isella3::MyStateMessage_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MyStateMessage
typedef  ::isella3::MyStateMessage_<std::allocator<void> > MyStateMessage;

typedef boost::shared_ptr< ::isella3::MyStateMessage> MyStateMessagePtr;
typedef boost::shared_ptr< ::isella3::MyStateMessage const> MyStateMessageConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::isella3::MyStateMessage_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::isella3::MyStateMessage_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace isella3

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::isella3::MyStateMessage_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::isella3::MyStateMessage_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::isella3::MyStateMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5d60ca0418a895ce9ed384f27292a682";
  }

  static const char* value(const  ::isella3::MyStateMessage_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5d60ca0418a895ceULL;
  static const uint64_t static_value2 = 0x9ed384f27292a682ULL;
};

template<class ContainerAllocator>
struct DataType< ::isella3::MyStateMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "isella3/MyStateMessage";
  }

  static const char* value(const  ::isella3::MyStateMessage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::isella3::MyStateMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64  dt\n\
float64  position\n\
float64  desired_position\n\
float64  position_error\n\
float64  current\n\
\n\
";
  }

  static const char* value(const  ::isella3::MyStateMessage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::isella3::MyStateMessage_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::isella3::MyStateMessage_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.dt);
    stream.next(m.position);
    stream.next(m.desired_position);
    stream.next(m.position_error);
    stream.next(m.current);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MyStateMessage_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::isella3::MyStateMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::isella3::MyStateMessage_<ContainerAllocator> & v) 
  {
    s << indent << "dt: ";
    Printer<double>::stream(s, indent + "  ", v.dt);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "desired_position: ";
    Printer<double>::stream(s, indent + "  ", v.desired_position);
    s << indent << "position_error: ";
    Printer<double>::stream(s, indent + "  ", v.position_error);
    s << indent << "current: ";
    Printer<double>::stream(s, indent + "  ", v.current);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ISELLA3_MESSAGE_MYSTATEMESSAGE_H

